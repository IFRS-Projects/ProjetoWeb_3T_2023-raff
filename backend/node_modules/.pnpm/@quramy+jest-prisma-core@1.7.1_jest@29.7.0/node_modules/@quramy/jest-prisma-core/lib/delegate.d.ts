import type { Circus } from "@jest/types";
import type { JestEnvironmentConfig, EnvironmentContext } from "@jest/environment";
import type { JestEnvironment } from "@jest/environment";
import type { JestPrisma, PrismaClientLike } from "./types";
type PartialEnvironment = Pick<JestEnvironment<unknown>, "handleTestEvent" | "teardown">;
export declare class PrismaEnvironmentDelegate implements PartialEnvironment {
    private _originalClient;
    private prismaClientProxy;
    private connected;
    private triggerTransactionEnd;
    private readonly options;
    private readonly testPath;
    private logBuffer;
    getClient(): PrismaClientLike | undefined;
    constructor(config: JestEnvironmentConfig, context: EnvironmentContext);
    preSetup<T = PrismaClientLike>(): Promise<JestPrisma<T>>;
    handleTestEvent(event: Circus.Event): Promise<void> | undefined;
    teardown(): Promise<void>;
    private get originalClient();
    private checkInteractiveTransaction;
    private beginTransaction;
    private endTransaction;
    private dumpQueryLog;
}
export {};
